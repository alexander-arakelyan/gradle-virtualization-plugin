buildscript {
    repositories {
        flatDir {
            dirs "../gradle-virtualization-plugin/build/libs"
        }
    }
    dependencies {
        def pluginExists = file("${rootDir}/gradle-virtualization-plugin/build/libs/gradle-virtualization-plugin-${rootProject.version}.jar").exists()
        if (pluginExists) {
            logger.lifecycle("Plugin JAR found - classpath")
            classpath name: "gradle-virtualization-plugin", version: "${version}", classifier: ""
        } else {
            logger.lifecycle("No plugin JAR found")
        }
    }
}

apply plugin: "java"
def pluginExists = file("${rootDir}/gradle-virtualization-plugin/build/libs/gradle-virtualization-plugin-${rootProject.version}.jar").exists()
//pluginExists=false
if (pluginExists) {
    logger.lifecycle("Plugin JAR found - applying plugin")
    apply plugin: "${group}.gradle.virtualization.plugin"

    logger.lifecycle("Plugin JAR found - configuring plugin")

    def userHome = "" + System.getProperty("user.home")

    kubernetes {
        kubernetesClusterCommand = "minikube" // optional
        kubernetesCommand = "kubectl" // optional
        resources = [
                "${projectDir}/src/main/kubernetes/my-env.yaml"
        ]
        namespace = "${dockerNamespace}"
        secretGroups {
            secretGroup {
                name = "regcred"
                secret {
                    file = ".dockerconfigjson=${userHome}/.docker/config.json"
                    type = "kubernetes.io/dockerconfigjson"
                }
            }
            secretGroup {
                name = "db"
                secret {
                    name = "db-name"
                    literal = ""
                }
                secret {
                    name = "db-password"
                    literal = "2"
                }
                secret {
                    name = "db-host"
                    literal = "3"
                }
            }
        }
        configmapGroups {
            configmapGroup {
                name = "map1"
                configmap {
                    name = "k1"
                    literal = "v1"
                }
            }
        }
    }

    docker {
        dockerFile = "${projectDir}/src/main/docker/Dockerfile" // optional, Dockerfile by default
        dockerCommand = "docker" // optional, "docker" by default
        namespace = "${dockerNamespace}"
        repo = "${dockerRepo}" // repository to push images in
        username = "${dockerUsername}"
        password = "${dockerPassword}"
        repositories {
            repository {
                url = "${dockerRepo}"
                username = "${dockerUsername}"
                password = "${dockerPassword}"
            }
            repository {
                url = "localhost"
                username = "${dockerUsername}"
                password = "${dockerPassword}"
            }
        }
        dockerBuildDir = buildDir // optional, ${project.buildDir} will be used by default
        tagName = "test-virtualization-image" // optional, ${project.name} will be used by default
        containerName = "test-virtualization-container" // optional, ${project.name} will be used by default
        mounts {
            mount {
                host = "/home"
                container = "/temp1"
                options = "z"
            }
            mount {
                host = "/usr/bin"
                container = "/temp2"
                options = "z"
            }
        }
        envs {
            env {
                name = "ENV1"
                value = "ENV1-VAL"
            }
        }
    }
} else {
    logger.lifecycle("No plugin JAR found")
}
