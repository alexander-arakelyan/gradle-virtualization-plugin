buildscript {
    repositories {
        flatDir {
            dirs "../gradle-virtualization-plugin/build/libs"
        }
    }
    dependencies {
        def pluginExists = file("../gradle-virtualization-plugin/build/libs/gradle-virtualization-plugin-${version}.jar").exists()
        if (pluginExists) {
            logger.lifecycle("Plugin JAR found - classpath")
            classpath name: "gradle-virtualization-plugin", version: "${version}", classifier: ""
        } else {
            logger.lifecycle("No plugin JAR found")
        }
    }
}

apply plugin: "java"
def pluginExists = file("../gradle-virtualization-plugin/build/libs/gradle-virtualization-plugin-${version}.jar").exists()
//pluginExists=false
if (pluginExists) {
    apply plugin: "${group}.gradle.virtualization.plugin"
}

if (pluginExists) {
    logger.lifecycle("Plugin JAR found - config")
    kubernetes {

    }

    docker {
        dockerFile = "src/main/docker/Dockerfile" // optional, Dockerfile by default
        dockerCommand = "docker" // optional, "docker" by default
        repo = "${dockerRepo}" // repository to push images in
        repoNamespace = "${dockerNamespace}"
        username = "${dockerUsername}"
        password = "${dockerPassword}"
        dockerBuildDir = buildDir // optional, ${project.buildDir} will be used by default
        tagName = "test-virtualization-image" // optional, ${project.name} will be used by default
        containerName = "test-virtualization-container" // optional, ${project.name} will be used by default
        mounts {
            mount {
                host = "/home"
                container = "/temp1"
                options = "z"
            }
            mount {
                host = "/usr/bin"
                container = "/temp2"
                options = "z"
            }
        }
        envs {
            env {
                name = "ENV1"
                value = "ENV1-VAL"
            }
        }
    }
} else {
    logger.lifecycle("No plugin JAR found")
}
